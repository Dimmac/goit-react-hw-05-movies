{"version":3,"file":"static/js/628.0ae187d1.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetailsPage/MovieDetailsPage.style.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  display: flex;\n  padding-left: 20px;\n`;\n\nexport const Title = styled.h1`\n  margin: 0;\n`;\n\nexport const TextGenres = styled.p`\n  margin-bottom: 0px;\n  padding-bottom: 10px;\n`;\n\nexport const ImageContainer = styled.div`\n  margin-right: 20px;\n`;\n\nexport const Image = styled.img`\n  object-fit: cover;\n  width: 200px;\n`;\n","import img from '../../images/no-poster1.png';\nimport {\n  Section,\n  Image,\n  ImageContainer,\n  Title,\n  TextGenres,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ dataVideo }) => {\n  const {\n    poster_path,\n    name,\n    original_title,\n    release_date,\n    first_air_date,\n    vote_average,\n    overview,\n    genres,\n  } = dataVideo;\n\n  let filmYear;\n  release_date !== undefined\n    ? (filmYear = release_date)\n    : (filmYear = first_air_date);\n  if (!release_date && !first_air_date) {\n    filmYear = '';\n  }\n\n  return (\n    <Section>\n      <ImageContainer>\n        <Image\n          src={\n            poster_path\n              ? `http://image.tmdb.org/t/p/w500${poster_path}`\n              : // ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                `${img}`\n          }\n          alt={name}\n        />\n      </ImageContainer>\n      <div>\n        <Title>\n          {original_title || name} ({filmYear.slice(0, 4)})\n        </Title>\n        <p>User score: {Math.round((vote_average * 100) / 10)}%</p>\n        <h2>Overviev</h2>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        {genres && (\n          <TextGenres>{genres.map(genre => genre.name).join(', ')}</TextGenres>\n        )}\n      </div>\n    </Section>\n  );\n};\n\nexport default MovieCard;\n","import styled from 'styled-components';\nimport { Link, NavLink } from 'react-router-dom';\nimport { TiArrowBack } from 'react-icons/ti';\nimport { ImArrowLeft } from 'react-icons/im';\n\nexport const Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  border-bottom: black solid 1px;\n`;\nexport const Arrow = styled(TiArrowBack)`\n  width: 20px;\n  height: 15px;\n\n  margin-right: 2px;\n`;\n\nexport const Button = styled.button`\n  margin: 5px 20px;\n  padding: 5px 10px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  font-size: 14px;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  font-weight: 400;\n  background-color: #ff7777;\n\n  :hover {\n    background-color: #ff5555;\n    transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const LinkButton = styled(Link)`\n  color: black;\n  text-decoration: none;\n`;\n\nexport const List = styled.ul`\n  padding-bottom: 10px;\n  margin: 0px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  border-bottom: black solid 1px;\n`;\n\nexport const Title = styled.h3`\n  margin: 0;\n  padding-top: 10px;\n  padding-left: 20px;\n`;\n\nexport const LinkAdd = styled(NavLink)`\n  display: block;\n  color: black;\n  text-decoration: none;\n  padding-left: 5px;\n  &.active {\n    color: red;\n  }\n  :hover {\n    color: #1e90ff;\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const ArrowInfo = styled(ImArrowLeft)`\n  width: 20px;\n  height: 15px;\n\n  margin-right: 2px;\n`;\nexport const Image = styled.img``;\nexport const ImageContainer = styled.div``;\n","import { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { trendingFetchMoviesById } from '../../services/themoviedbApi';\nimport MovieCard from '../../components/MovieCard/MovieCard';\nimport {\n  Section,\n  Button,\n  LinkButton,\n  List,\n  LinkAdd,\n  Title,\n  Arrow,\n  ArrowInfo,\n} from './MovieDetailsPage.style';\n\nexport const MovieDetailsPage = () => {\n  const [items, setItems] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    async function fetch() {\n      try {\n        const item = await trendingFetchMoviesById(movieId);\n        setItems(item);\n      } catch (error) {\n        toast.error('There is no review of the video and the cast');\n      }\n    }\n    fetch();\n  }, [movieId]);\n\n  const {\n    backdrop_path,\n    poster_path,\n    name,\n    original_title,\n    release_date,\n    first_air_date,\n    vote_average,\n    overview,\n    genres,\n  } = items;\n\n  return (\n    <>\n      <Section>\n        <Button type=\"button\">\n          <Arrow />\n          <LinkButton to={location?.state?.from ?? '/'}>Go back</LinkButton>\n        </Button>\n        <MovieCard\n          dataVideo={{\n            backdrop_path,\n            poster_path,\n            name,\n            original_title,\n            release_date,\n            first_air_date,\n            vote_average,\n            overview,\n            genres,\n          }}\n        />\n      </Section>\n      <Title>Additional information</Title>\n\n      <List>\n        <li>\n          <LinkAdd to={`cast`} state={{ from: location?.state?.from }}>\n            Cast <ArrowInfo />\n          </LinkAdd>\n        </li>\n        <li>\n          <LinkAdd to={`reviews`} state={{ from: location?.state?.from }}>\n            Reviews <ArrowInfo />\n          </LinkAdd>\n        </li>\n      </List>\n      <Outlet />\n    </>\n  );\n};\n"],"names":["Section","styled","Title","TextGenres","ImageContainer","Image","filmYear","dataVideo","poster_path","name","original_title","release_date","first_air_date","vote_average","overview","genres","undefined","src","img","alt","slice","Math","round","map","genre","join","Arrow","TiArrowBack","Button","LinkButton","Link","List","LinkAdd","NavLink","ArrowInfo","ImArrowLeft","MovieDetailsPage","useState","items","setItems","movieId","useParams","location","useLocation","useEffect","trendingFetchMoviesById","item","toast","fetch","backdrop_path","type","to","state","from"],"sourceRoot":""}